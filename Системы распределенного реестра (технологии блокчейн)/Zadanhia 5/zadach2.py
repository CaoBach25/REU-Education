import requests

# Функция для получения последнего блока
def получить_последний_блок():
    url = "https://blockchain.info/latestblock"
    ответ = requests.get(url)
    if ответ.status_code == 200:
        return ответ.json()  # Возвращает данные последнего блока
    else:
        print(f"Ошибка при запросе последнего блока: {ответ.status_code}")
        return None

# Функция для получения данных конкретного блока по хэшу
def получить_данные_блока(хэш_блока):
    url = f"https://blockchain.info/rawblock/{хэш_блока}"
    ответ = requests.get(url)
    if ответ.status_code == 200:
        return ответ.json()  # Возвращает данные блока
    else:
        print(f"Ошибка при запросе данных блока: {ответ.status_code}")
        return None

# Функция для анализа последних 50 блоков
def анализ_блоков(количество_блоков=50):
    последний_блок = получить_последний_блок()  # Получаем последний блок
    if not последний_блок:
        return None

    адреса = {}  # Словарь для подсчёта адресов
    текущий_хэш = последний_блок["hash"]  # Хэш последнего блока

    for _ in range(количество_блоков):
        блок = получить_данные_блока(текущий_хэш)  # Получаем данные текущего блока
        if not блок:
            break

        # Извлекаем coinbase транзакцию (первую в блоке)
        coinbase_транзакция = блок['tx'][0]
        выводы = coinbase_транзакция['out']

        for вывод in выводы:
            if 'addr' in вывод:  # Проверяем наличие адреса
                адрес = вывод['addr']
                адреса[адрес] = адреса.get(адрес, 0) + 1  # Увеличиваем счётчик

        текущий_хэш = блок['prev_block']  # Переходим к предыдущему блоку

    # Возвращаем адрес, сформировавший больше всего блоков
    return max(адреса, key=адреса.get), адреса
# Функция для получения баланса и количества транзакций адреса
def получить_данные_адреса(адрес):
    url = f"https://blockchain.info/rawaddr/{адрес}"
    ответ = requests.get(url)
    if ответ.status_code == 200:
        данные = ответ.json()
        return {
            "баланс": данные['final_balance'] / 1e8,  # Конвертируем сатоши в BTC
            "количество_транзакций": данные['n_tx']
        }
    else:
        print(f"Ошибка при запросе данных адреса: {ответ.status_code}")
        return None
# Основная программа
адрес, статистика = анализ_блоков()  # Анализируем последние 50 блоков
if адрес:
    данные_адреса = получить_данные_адреса(адрес)  # Получаем данные адреса
    if данные_адреса:
        print(f"Адрес, сформировавший большинство блоков: {адрес}")
        print(f"Количество блоков: {статистика[адрес]}")
        print(f"Текущий баланс: {данные_адреса['баланс']} BTC")
        print(f"Общее количество транзакций: {данные_адреса['количество_транзакций']}")
    else:
        print("Не удалось получить данные для адреса.")
else:
    print("Не удалось определить адрес.")